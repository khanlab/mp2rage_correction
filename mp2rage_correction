#!/bin/bash
execpath=`dirname $0`
execpath=`realpath $execpath`

function die {
 echo $1 >&2
 exit 1
}

participant_label=

if [ "$#" -lt 3 ]
then
 echo "Usage: mp2rage_correction bids_dir output_dir participant <optional arguments>"
 echo "          [--participant_label PARTICIPANT_LABEL [PARTICIPANT_LABEL...]]"
 echo "          [--mp2rage_echo_spacing T_SEC (default: 7.9e-3) Found in ProtocolPDF -> MP2RAGE -> Sequence -> Echo Spacing ]"
 echo "          [--sa2rage_echo_spacing T_SEC (default: 2.2e-3) Found in ProtocolPDF -> Sa2RAGE -> Sequence -> Echo Spacing ]"
 echo "          [--mp2rage_param_csv FILE_PATH ]"
 echo "          [--sa2rage_param_csv FILE_PATH ]"
 echo ""
 exit 1
fi

in_bids=$1 
out_folder=$2 
analysis_level=$3


shift 3

#MP2RAGE Echo Spacing
mp2rage_echo_spacing=7.9e-3

#Sa2RAGE Echo Spacing
sa2rage_echo_spacing=2.2e-3

mp2rage_param_csv=
sa2rage_param_csv=


while :; do
      case $1 in
     -h|-\?|--help)
	     usage
            exit
              ;;
       --participant_label )       # takes an option argument; ensure it has been specified.
          if [ "$2" ]; then
                participant_label=$2
                  shift
	      else
              die 'error: "--participant" requires a non-empty option argument.'
            fi
              ;;
     --participant_label=?*)
          participant_label=${1#*=} # delete everything up to "=" and assign the remainder.
            ;;
          --participant_label=)         # handle the case of an empty --participant=
         die 'error: "--participant_label" requires a non-empty option argument.'
          ;;

       --mp2rage_echo_spacing )       # takes an option argument; ensure it has been specified.
          if [ "$2" ]; then
                mp2rage_echo_spacing=$2
                  shift
	      else
              die 'error: "--mp2rage_echo_spacing" requires a non-empty option argument.'
            fi
              ;;
     --mp2rage_echo_spacing=?*)
          mp2rage_echo_spacing=${1#*=} # delete everything up to "=" and assign the remainder.
            ;;
          --mp2rage_echo_spacing=)         # handle the case of an empty --participant=
         die 'error: "--mp2rage_echo_spacing" requires a non-empty option argument.'
          ;;


       --sa2rage_echo_spacing )       # takes an option argument; ensure it has been specified.
          if [ "$2" ]; then
                sa2rage_echo_spacing=$2
                  shift
	      else
              die 'error: "--sa2rage_echo_spacing" requires a non-empty option argument.'
            fi
              ;;
     --sa2rage_echo_spacing=?*)
          sa2rage_echo_spacing=${1#*=} # delete everything up to "=" and assign the remainder.
            ;;
          --sa2rage_echo_spacing=)         # handle the case of an empty --participant=
         die 'error: "--sa2rage_echo_spacing" requires a non-empty option argument.'
          ;;

       --mp2rage_param_csv )       # takes an option argument; ensure it has been specified.
          if [ "$2" ]; then
                mp2rage_param_csv=$2
                  shift
	      else
              continue
            fi
              ;;
     --mp2rage_param_csv=?*)
          mp2rage_param_csv=${1#*=} # delete everything up to "=" and assign the remainder.
            ;;
          --mp2rage_param_csv=)         # handle the case of an empty --mp2rage_param_csv=
         die 'error: "--mp2rage_param_csv" requires a non-empty option argument.'
          ;;    
     --sa2rage_param_csv )       # takes an option argument; ensure it has been specified.
          if [ "$2" ]; then
                sa2rage_param_csv=$2
                  shift
	      else
              continue
            fi
              ;;
     --sa2rage_param_csv=?*)
          sa2rage_param_csv=${1#*=} # delete everything up to "=" and assign the remainder.
            ;;
          --sa2rage_param_csv=)         # handle the case of an empty --mp2rage_param_csv=
         die 'error: "--sa2rage_param_csv" requires a non-empty option argument.'
          ;;  

      -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
              ;;
     *)               # Default case: No more options, so break out of the loop.
          break
    esac
  
 shift
  done


shift $((OPTIND-1))



if [ -e $in_bids ]
then
	in_bids=`realpath $in_bids`
else
	echo "ERROR: bids_dir $in_bids does not exist!"
	exit 1
fi


if [ "$analysis_level" = "participant" ]
then
 echo " running participant level analysis"
 else
  echo "only participant level analysis is enabled"
  exit 0
fi


participants=$in_bids/participants.tsv

work_folder=$out_folder/work
derivatives=$out_folder #bids derivatives

mkdir -p $work_folder $derivatives
derivatives=`realpath $derivatives`

#just in case participants.tsv does not exist:
if [ ! -e $participants ]
then
    #participants tsv not required by bids, so if it doesn't exist, create one for temporary use
    participants=$work_folder/participants.tsv
    echo participant_id > $participants
    participants=`realpath $participants`
    pushd $in_bids
    ls -d sub-* >> $participants
    popd 
fi


pushd $work_folder
echo $participants


if [ -n "$participant_label" ]
then
subjlist=`echo $participant_label | sed  's/,/\ /g'` 
else
subjlist=`tail -n +2 $participants | awk '{print $1}'`
fi

for subj in $subjlist 
do

#add on sub- if not exists
if [ ! "${subj:0:4}" = "sub-" ]
then
  subj="sub-$subj"
fi
    #loop over sub- and sub-/ses- anat folders
    for subjfolder in `ls -d $in_bids/$subj/anat $in_bids/$subj/ses-*/anat`
    do
        subj_sess_dir=${subjfolder%/anat}
        subj_sess_dir=${subj_sess_dir##$in_bids/}
        if echo $subj_sess_dir | grep -q '/'
        then
            sess=${subj_sess_dir##*/}
            subj_sess_prefix=${subj}_${sess}
        else
            subj_sess_prefix=${subj}
        fi
        echo subjfolder $subjfolder
        echo subj_sess_dir $subj_sess_dir
        echo sess $sess
        echo subj_sess_prefix $subj_sess_prefix



b1inv1=`eval ls "$in_bids/${subj_sess_dir}/fmap/${subj_sess_prefix}_inv-1_*SA2RAGE.nii*" "$in_bids/${subj_sess_dir}/fmap/${subj_sess_prefix}_part-mag_inv-1_*SA2RAGE.nii*" | head -n 1` 
b1inv2=`eval ls "$in_bids/${subj_sess_dir}/fmap/${subj_sess_prefix}_inv-2_*SA2RAGE.nii*" "$in_bids/${subj_sess_dir}/fmap/${subj_sess_prefix}_part-mag_inv-2_*SA2RAGE.nii*" | head -n 1` 
b1uni=`eval ls $in_bids/${subj_sess_dir}/fmap/${subj_sess_prefix}_acq-{b1Div,UNI}_*SA2RAGE.nii* | head -n 1` 
b1map=`eval ls $in_bids/${subj_sess_dir}/fmap/${subj_sess_prefix}_acq-b1map_*SA2RAGE.nii* | head -n 1` 
if [ ! -e "$b1map" ]
then
 nob1map=1
 else
	 nob1map=0
 fi


#verify b1inv1 and b1inv2 exist
if [ ! -e "$b1inv1" -o ! -e "$b1inv2" ]
then
	echo "Required SA2RAGE inv-1 or SA2RAGE inv-2 not found! (searched for: $in_bids/${subj_sess_dir}/fmap/${subj_sess_prefix}_inv-2_SA2RAGE*.nii*)"
	exit 1
fi

# technically, we don't require the b1map if UNI/b1Div is provided
if [ ! -e "$b1uni" ]
then
	echo "required Sa2RAGE UNI/b1Div does not exist!"
	exit 1
fi


# iterate over runs and echos, by finding *_acq-UNI_*MP2RAGE images


for t1uni in $in_bids/${subj_sess_dir}/anat/${subj_sess_prefix}*acq-UNI_*MP2RAGE.nii* 
do

 echo t1uni: $t1uni
 beforeacq=${t1uni%%_acq-UNI_*}
 beforeacq=${beforeacq##*/}
 afteracq=${t1uni##*acq-UNI_}
 afteracq=${afteracq%%_MP2RAGE.*}

 echo beforeacq $beforeacq
 echo afteracq $afteracq

 t1inv1=`eval ls "$in_bids/${subj_sess_dir}/anat/${beforeacq}_inv-1_${afteracq}*MP2RAGE.nii*" | head -n 1`
 if [ ! -n "$t1inv1" ]; then echo "t1inv1 missing, skipping correction for $t1uni"; continue; fi
 t1inv2=`eval ls "$in_bids/${subj_sess_dir}/anat/${beforeacq}_inv-2_${afteracq}*MP2RAGE.nii*" | head -n 1`
 if [ ! -n "$t1inv2" ]; then echo "t1inv2 missing, skipping correction for $t1uni"; continue; fi

 echo b1uni: $b1uni
 echo b1map: $b1map
 echo b1inv1: $b1inv1
 echo b1inv2: $b1inv2
 echo t1uni: $t1uni
 echo t1inv1: $t1inv1
 echo t1inv2: $t1inv2

 echo beforeacq filename tags: $beforeacq
 echo afteracq filename tags: $afteracq

 work_dir=${beforeacq}_$afteracq
 echo work_dir: $work_dir

mkdir -p $work_dir

#create config file for mp2rage
if [ -n "${mp2rage_param_csv}" ]
then
  if [ ! -e $mp2rage_param_csv ]
  then
    echo "$mp2rage_param_csv does not exist!"
    exit 1
  fi
  echo "mp2rage_parameters read: $mp2rage_params_csv"
  t1_params=$work_dir/`basename $mp2rage_param_csv`
  cp $mp2rage_param_csv $t1_params
else
  t1_params=$work_dir/mp2rage_parameters.csv
  rm -f $t1_params
  t1inv1_json=${t1inv1%%.nii.gz}.json
  t1inv2_json=${t1inv2%%.nii.gz}.json
  echo "B0=`getValueJson.py $t1inv1_json MagneticFieldStrength`" >> $t1_params
  echo "TR=`getValueJson.py $t1inv1_json RepetitionTime`" >> $t1_params
  echo "TRFLASH=$mp2rage_echo_spacing" >> $t1_params  #can get from PDF Protocol as Sequence: Echo Spacing
  echo "TIs=[`getValueJson.py $t1inv1_json InversionTime`,`getValueJson.py $t1inv2_json InversionTime`]" >> $t1_params
  NZ=`fslval $t1inv1 dim1`
  ResPE=`getValueJson.py $t1inv1_json AcquisitionMatrixPE`
  NumPEsteps=`getValueJson.py $t1inv1_json PhaseEncodingSteps`
  PartialFourier=`bashcalc $NumPEsteps/$ResPE` 
  #NZslices = Slices Per Slab * [PartialFourierInSlice-0.5  0.5]
  echo "NZslices=[`bashcalc "$NZ*($PartialFourier - 0.5)"`,`bashcalc "$NZ*( 0.5)"`]" >> $t1_params
  echo "FlipDegrees=[`getValueJson.py $t1inv1_json FlipAngle`,`getValueJson.py $t1inv2_json FlipAngle`]" >> $t1_params
  echo "InvEFF=0.96" >> $t1_params   #inversion efficiency of the adiabatic pulse 
fi

#create config file for sa2rage
if [ -n "$sa2rage_param_csv" ]; then
 if [ ! -e $sa2rage_param_csv ]
  then
    echo "$sa2rage_param_csv does not exist!"
    exit 1
  fi
  echo "sa2rage parameters read: $sa2rage_params_csv"
  b1_params=$work_dir/`basename $sa2rage_param_csv`
  cp $sa2rage_param_csv $b1_params
else
  b1_params=$work_dir/sa2rage_parameters.csv
  rm -f $b1_params
  
  b1inv1_json=${b1inv1%%.nii.gz}.json
  b1inv2_json=${b1inv2%%.nii.gz}.json
  
  b1inv1_json=${b1inv1%%.nii.gz}.json
  b1inv2_json=${b1inv2%%.nii.gz}.json
  echo "TR=`getValueJson.py $b1inv1_json RepetitionTime`" >> $b1_params
  echo "TRFLASH=$sa2rage_echo_spacing" >> $b1_params  #can get from PDF Protocol as Sequence: Echo Spacing

  #for older scans, dicom tag for TI in Sa2RAGE in milliseconds instead of seconds, so need to divide by 1000
  # if inversion time is greater than 10, then can assume we are in milliseconds (since TI=10s is way too large..) 
 
  TI1_ms=`getValueJson.py $b1inv1_json InversionTime` 
  TI2_ms=`getValueJson.py $b1inv2_json InversionTime`
  is_milliseconds=`bashcalc "$TI1_ms > 10"`
  if [ "$is_milliseconds" = "1" ]
  then
    echo "InversionTime is assumed to be in milliseconds, accounting for this.."
    echo "TIs=[${TI1_ms}e-3,${TI2_ms}e-3]" >> $b1_params
    else
    echo "TIs=[${TI1_ms},${TI2_ms}]" >> $b1_params
  fi
  AccelPE=`getValueJson.py $b1inv1_json ParallelReductionFactorInPlane`
  ResPE=`getValueJson.py $b1inv1_json AcquisitionMatrixPE`
  NumPEsteps=`getValueJson.py $b1inv1_json PhaseEncodingSteps`
  PartialFourier=`bashcalc $NumPEsteps/$ResPE` 
  #  Sa2RAGE.NZslices=128.*[0.25 0.5]./2 # Base Resolution * [PartialFourierInPE-0.5  0.5]/iPATpe  
  NZ1=`bashcalc "$ResPE*($PartialFourier - 0.5)/$AccelPE"`
  NZ2=`bashcalc "$ResPE*0.5/$AccelPE"`
  echo "NZslices=[$NZ1,$NZ2]" >> $b1_params
  echo "FlipDegrees=[`getValueJson.py $b1inv1_json FlipAngle`,`getValueJson.py $b1inv2_json FlipAngle`]" >> $b1_params
  echo "averageT1=1.5"   >> $b1_params
fi

#convert to float for precision
t1uni_f=$work_dir/${t1uni##*/}
if [ ! -e $t1uni_f ]
then
echo fslmaths $t1uni $t1uni_f -odt float 
fslmaths $t1uni $t1uni_f -odt float 
fi

#now, register the sa2rage inv2 to the mp2rage inv2
b1inv2_file=${b1inv2##*/}
b1inv2_reg=$work_dir/${b1inv2_file%%.nii.gz}_space-T1w.nii.gz
b1_to_t1=$work_dir/SA2RAGE_to_MP2RAGE_flirt.mat
if [ ! -e $b1_to_t1 ]
then
echo flirt -v -nosearch -usesqform -in $b1inv2 -out $b1inv2_reg -omat $b1_to_t1 -ref $t1inv2
flirt -v -nosearch -usesqform -in $b1inv2 -out $b1inv2_reg -omat $b1_to_t1 -ref $t1inv2
fi

#transform sa2rage UNI to t1 space
b1uni_file=${b1uni##*/}
b1uni_reg=$work_dir/${b1uni_file%%.nii.gz}_space-T1w.nii.gz
if [ ! -e $b1uni_reg ]
then
echo flirt -datatype float -applyxfm -init $b1_to_t1 -ref $t1inv2 -in $b1uni -out $b1uni_reg -interp nearestneighbour
flirt -datatype float -applyxfm -init $b1_to_t1 -ref $t1inv2 -in $b1uni -out $b1uni_reg -interp nearestneighbour
fi




if [ "$nob1map" = "0" ]
then
b1map_file=${b1map##*/}
b1map_reg=$work_dir/${b1map_file%%.nii.gz}_space-T1w.nii.gz
if [ ! -e $b1map_reg ]
then
echo flirt -datatype float -applyxfm -init $b1_to_t1 -ref $t1inv2 -in $b1map -out $b1map_reg -interp nearestneighbour
flirt -datatype float -applyxfm -init $b1_to_t1 -ref $t1inv2 -in $b1map -out $b1map_reg -interp nearestneighbour
fi
else
	b1map_reg="";
fi


t1map_corr=$work_dir/${beforeacq}_acq-MP2RAGE_${afteracq}_proc-SA2RAGE_T1map.nii
b1map_corr=$work_dir/${beforeacq}_acq-MP2RAGE_${afteracq}_proc-SA2RAGE_B1map.nii
t1uni_file=${t1uni##*/}
t1uni_corr=$work_dir/${t1uni_file%%_MP2RAGE.nii.gz}_proc-SA2RAGE_MP2RAGE.nii
uni_den=$work_dir/${t1uni_file%%_MP2RAGE.nii.gz}_proc-SA2RAGE_T1w.nii

#if [ ! -e $t1map_corr ]
#then
echo "mp2rage_correction('$t1inv1','$t1inv2','$b1uni_reg','$t1uni_f','$b1_params','$t1_params','$t1uni_corr','$t1map_corr','$b1map_corr','$uni_den','$b1map_reg')"
echo ${execpath}/mcr/${MCRVERSION}/run_mp2rage_correction.sh $MCRROOT $t1inv1 $t1inv2 $b1uni_reg $t1uni_f $b1_params $t1_params $t1uni_corr $t1map_corr $b1map_corr $uni_den $b1map_reg 
${execpath}/mcr/${MCRVERSION}/run_mp2rage_correction.sh $MCRROOT $t1inv1 $t1inv2 $b1uni_reg $t1uni_f $b1_params $t1_params $t1uni_corr $t1map_corr $b1map_corr $uni_den $b1map_reg 
#fi

gzip $t1map_corr $t1uni_corr $b1map_corr $uni_den

#copy to bids folder:
out_deriv=$derivatives/$subj_sess_dir
mkdir -p $out_deriv/anat $out_deriv/fmap
cp -v ${t1map_corr}.gz ${t1uni_corr}.gz ${uni_den}.gz $out_deriv/anat
cp -v ${b1map_corr}.gz  $out_deriv/fmap

done # loop through t1map inputs

done  #subjfolder

done  #subj

popd
